import {
  act2,
  entry_preview_exports,
  getReactActEnvironment,
  renderToCanvas,
  setReactActEnvironment
} from "./chunk-YD4427JO.js";
import "./chunk-DF7VAP3D.js";
import {
  require_global
} from "./chunk-DXIOBCSA.js";
import {
  require_preview_api
} from "./chunk-6GFF2EK4.js";
import "./chunk-MWSGYS3J.js";
import {
  require_react
} from "./chunk-USEVLOEB.js";
import {
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/@storybook/react/dist/index.mjs
var import_global = __toESM(require_global(), 1);
var React = __toESM(require_react(), 1);
var import_preview_api = __toESM(require_preview_api(), 1);
var { window: globalWindow } = import_global.global;
globalWindow && (globalWindow.STORYBOOK_ENV = "react");
function setProjectAnnotations(projectAnnotations) {
  return (0, import_preview_api.setDefaultProjectAnnotations)(INTERNAL_DEFAULT_PROJECT_ANNOTATIONS), (0, import_preview_api.setProjectAnnotations)(projectAnnotations);
}
var INTERNAL_DEFAULT_PROJECT_ANNOTATIONS = { ...entry_preview_exports, beforeAll: async function() {
  try {
    let { configure } = await import("./@storybook_test.js");
    configure({ unstable_advanceTimersWrapper: (cb) => act2(cb), asyncWrapper: async (cb) => {
      let previousActEnvironment = getReactActEnvironment();
      setReactActEnvironment(false);
      try {
        let result = await cb();
        return await new Promise((resolve) => {
          setTimeout(() => {
            resolve();
          }, 0), jestFakeTimersAreEnabled() && jest.advanceTimersByTime(0);
        }), result;
      } finally {
        setReactActEnvironment(previousActEnvironment);
      }
    }, eventWrapper: (cb) => {
      let result;
      return act2(() => {
        result = cb();
      }), result;
    } });
  } catch {
  }
}, renderToCanvas: async (renderContext, canvasElement) => {
  if (renderContext.storyContext.testingLibraryRender == null) {
    let unmount2;
    return await act2(async () => {
      unmount2 = await renderToCanvas(renderContext, canvasElement);
    }), async () => {
      await act2(() => {
        unmount2();
      });
    };
  }
  let { storyContext: { context, unboundStoryFn: Story, testingLibraryRender: render } } = renderContext, { unmount } = render(React.createElement(Story, { ...context }), { container: context.canvasElement });
  return unmount;
} };
function composeStory(story, componentAnnotations, projectAnnotations, exportsName) {
  return (0, import_preview_api.composeStory)(story, componentAnnotations, projectAnnotations, INTERNAL_DEFAULT_PROJECT_ANNOTATIONS, exportsName);
}
function composeStories(csfExports, projectAnnotations) {
  return (0, import_preview_api.composeStories)(csfExports, projectAnnotations, composeStory);
}
function jestFakeTimersAreEnabled() {
  return typeof jest < "u" && jest !== null ? setTimeout._isMockFunction === true || Object.prototype.hasOwnProperty.call(setTimeout, "clock") : false;
}
var _a;
typeof module < "u" && ((_a = module == null ? void 0 : module.hot) == null ? void 0 : _a.decline());
export {
  INTERNAL_DEFAULT_PROJECT_ANNOTATIONS,
  composeStories,
  composeStory,
  setProjectAnnotations
};
//# sourceMappingURL=@storybook_react.js.map
